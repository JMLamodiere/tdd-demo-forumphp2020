# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/Infrastructure/Symfony/DependencyInjection/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Infrastructure\Symfony\Controller\:
        resource: '../src/Infrastructure/Symfony/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Mark Command/Query handlers public to allow mocking them in controller tests
    # To be done in config/services.yml if concrete class, or in config/packages/test/services.yml if Interface
    App\Application\Command\RegisterRunningSessionHandler:
        public: true

    guzzle.accuweather:
        class: GuzzleHttp\Client
        arguments:
            -   base_uri: '%env(ACCUWEATHER_BASE_URI)%'

    App\Infrastructure\Http\RestWeatherProvider:
        arguments:
            $client: '@guzzle.accuweather'
            $apiKey: '%env(ACCUWEATHER_API_KEY)%'
